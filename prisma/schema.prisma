// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  SUPER_ADMIN
}

enum statusUser {
  AKTIF
  TIDAK_AKTIF
}

model User {
  id Int @id @db.Integer @default(autoincrement()) @unique
  name String @db.VarChar(100)
  username String @db.VarChar(100) @unique
  password String @db.VarChar(100)
  accessRole Role @default(ADMIN)
  status statusUser @default(TIDAK_AKTIF)
  refreshToken String? @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

enum Status {
  BELUM
  SEDANG_DIKERJAKAN
  SELESAI
}

model Order{
  id Int @id @db.Integer @default(autoincrement())
  customerName String @db.VarChar(100)
  date DateTime @db.Timestamp()
  address String @db.VarChar(100)
  serviceId Int @db.Integer
  service Service @relation(fields: [serviceId], references: [id])
  totalPrice Int @db.Integer
  status Status @default(BELUM)
  picId Int @db.Integer
  pic Worker @relation(fields: [picId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("orders")
}

enum Avail {
  AVAILABLE
  NON_AVAILABLE
}

model Service{
  id Int @id @db.Integer @default(autoincrement()) @unique
  title String @db.VarChar(100)  @unique
  price Int @db.Integer
  desc String @db.VarChar(256)
  status Avail @default(AVAILABLE)
  orders Order[]

  @@map("services")
}

model Worker {

  id Int @id @db.Integer @default(autoincrement()) @unique
  name String @db.VarChar(100)
  email String @db.VarChar(100) @unique
  alamat String @db.VarChar(100)
  orders Order[]

  @@map("worker")
}